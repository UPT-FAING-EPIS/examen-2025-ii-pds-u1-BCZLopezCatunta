name: Deploy Application

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**', 'frontend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'backend/**', 'frontend/**' ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: frontend/exam-system-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/exam-system-frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore .NET dependencies
      run: |
        cd backend/ExamSystem.API
        dotnet restore

    - name: Restore Node dependencies
      run: |
        cd frontend/exam-system-frontend
        npm ci

    - name: Build .NET application
      run: |
        cd backend/ExamSystem.API
        dotnet build --configuration Release --no-restore

    - name: Build React application
      run: |
        cd frontend/exam-system-frontend
        npm run build

    - name: Run .NET tests
      run: |
        cd backend/ExamSystem.API.Tests
        dotnet test --configuration Release --no-build --verbosity normal

    - name: Run React tests
      run: |
        cd frontend/exam-system-frontend
        npm test -- --coverage --watchAll=false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend/ExamSystem.API.Tests/TestResults/
          frontend/exam-system-frontend/coverage/

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Build and publish .NET application
      run: |
        cd backend/ExamSystem.API
        dotnet publish -c Release -o ./publish --self-contained false

    - name: Create deployment package
      run: |
        cd backend/ExamSystem.API
        zip -r backend-deployment.zip ./publish/*

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_BACKEND_APP_NAME }}
        slot-name: production
        publish-profile: ${{ secrets.AZURE_BACKEND_PUBLISH_PROFILE }}
        package: backend/ExamSystem.API/backend-deployment.zip

    - name: Configure App Settings
      run: |
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_BACKEND_APP_NAME }} \
          --settings \
            ASPNETCORE_ENVIRONMENT=Production \
            ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING }}"

    - name: Run database migrations
      run: |
        az webapp ssh --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_BACKEND_APP_NAME }} --command "cd /home/site/wwwroot && dotnet ef database update"

    - name: Restart App Service
      run: |
        az webapp restart --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_BACKEND_APP_NAME }}

    - name: Health check
      run: |
        sleep 30
        curl -f https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net/health || exit 1

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-backend]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: frontend/exam-system-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/exam-system-frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore Node dependencies
      run: |
        cd frontend/exam-system-frontend
        npm ci

    - name: Build React application
      run: |
        cd frontend/exam-system-frontend
        npm run build
      env:
        REACT_APP_API_URL: https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net/api

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create deployment package
      run: |
        cd frontend/exam-system-frontend
        zip -r frontend-deployment.zip ./build/*

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_FRONTEND_APP_NAME }}
        slot-name: production
        publish-profile: ${{ secrets.AZURE_FRONTEND_PUBLISH_PROFILE }}
        package: frontend/exam-system-frontend/frontend-deployment.zip

    - name: Configure App Settings
      run: |
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ secrets.AZURE_FRONTEND_APP_NAME }} \
          --settings \
            REACT_APP_API_URL=https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net/api

    - name: Restart App Service
      run: |
        az webapp restart --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_FRONTEND_APP_NAME }}

    - name: Health check
      run: |
        sleep 30
        curl -f https://${{ secrets.AZURE_FRONTEND_APP_NAME }}.azurewebsites.net || exit 1

  deploy-database:
    name: Deploy Database
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure subscription
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Run database migrations
      run: |
        cd backend/ExamSystem.API
        dotnet ef database update --connection "${{ secrets.CONNECTION_STRING }}"

    - name: Verify database connection
      run: |
        az sql db show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --server ${{ secrets.AZURE_SQL_SERVER }} \
          --name ${{ secrets.AZURE_SQL_DATABASE }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-database]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' && needs.deploy-database.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "Backend URL: https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net"
        echo "Frontend URL: https://${{ secrets.AZURE_FRONTEND_APP_NAME }}.azurewebsites.net"
        echo "API Documentation: https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net/swagger"

    - name: Notify Failure
      if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure' || needs.deploy-database.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Backend status: ${{ needs.deploy-backend.result }}"
        echo "Frontend status: ${{ needs.deploy-frontend.result }}"
        echo "Database status: ${{ needs.deploy-database.result }}"
        exit 1

  create-deployment-summary:
    name: Create Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-database]
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        cat > deployment-summary.md << 'EOF'
        # Deployment Summary
        
        ## Deployment Status
        - **Backend**: ${{ needs.deploy-backend.result }}
        - **Frontend**: ${{ needs.deploy-frontend.result }}
        - **Database**: ${{ needs.deploy-database.result }}
        
        ## Application URLs
        - **Frontend**: https://${{ secrets.AZURE_FRONTEND_APP_NAME }}.azurewebsites.net
        - **Backend API**: https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net
        - **API Documentation**: https://${{ secrets.AZURE_BACKEND_APP_NAME }}.azurewebsites.net/swagger
        
        ## Deployment Details
        - **Environment**: Production
        - **Branch**: ${{ github.ref_name }}
        - **Commit**: ${{ github.sha }}
        - **Timestamp**: $(date -u)
        
        ## Next Steps
        1. Verify application functionality
        2. Run smoke tests
        3. Monitor application logs
        4. Update monitoring dashboards
        EOF

    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary
        path: deployment-summary.md

    - name: Comment PR with deployment summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('deployment-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🚀 Deployment Summary\n\n${summary}`
          });
